name: Build and Push Docker Images

on:
  workflow_dispatch:

jobs:
  build-and-secure:
    runs-on: ubuntu-latest

    env:
      PRODUCER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/smartgridflow-producer
      CONSUMER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/smartgridflow-consumer

    steps:
    - name: 🧾 Checkout code
      uses: actions/checkout@v3

    # 🔍 Step 1: Secret Scanning with Gitleaks (checks your code for any hardcoded secrets, like API keys or passwords)
    - name: Secret Scan with Gitleaks
      uses: gitleaks/gitleaks-action@v2
      with:
        args: detect --source=. --verbose --redact

    # 🛡️ Step 2: SAST with Semgrep (performs Static Application Security Testing (SAST) to find vulnerabilities in your code)
    - name: Run Semgrep for SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: "p/python"
        publishToken: ""
      continue-on-error: true

    # 📦 Step 3: SCA with Retire.js checks your project’s dependencies for any known vulnerabilities
    - name: Install retire.js and Scan for Vulnerable Libraries
      run: |
        npm install -g retire
        retire --outputformat json --outputpath retire-report.json || true

    - name: Upload Retire.js Report
      uses: actions/upload-artifact@v4
      with:
        name: retirejs-report
        path: retire-report.json
        retention-days: 14

    # 🔐 Step 4: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # 🧪 Step 5: Lint Dockerfiles checks your Dockerfiles for best practices and potential issues
    - name: Lint Producer Dockerfile
      run: docker run --rm -i hadolint/hadolint < ./producer/Dockerfile || true

    - name: Lint Consumer Dockerfile
      run: docker run --rm -i hadolint/hadolint < ./consumer/Dockerfile || true

    # 🏗️ Step 6: Build and Push Producer Image
    - name: Build and Push Producer Image
      run: |
        docker build -t ${{ env.PRODUCER_IMAGE }}:latest ./producer
        docker push ${{ env.PRODUCER_IMAGE }}:latest

    # 🏗️ Step 7: Build and Push Consumer Image
    - name: Build and Push Consumer Image
      run: |
        docker build -t ${{ env.CONSUMER_IMAGE }}:latest ./consumer
        docker push ${{ env.CONSUMER_IMAGE }}:latest

    # 🔎 Step 8: Scan Producer Image with Trivy
    - name: Scan Producer Image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.PRODUCER_IMAGE }}:latest
        format: 'table'
        severity: 'CRITICAL,HIGH'

    # 🔎 Step 9: Scan Consumer Image with Trivy
    - name: Scan Consumer Image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.CONSUMER_IMAGE }}:latest
        format: 'table'
        severity: 'CRITICAL,HIGH'
